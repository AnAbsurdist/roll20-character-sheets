input(name='attr_version' type='hidden' value='1')

//- INCLUDES
	=============================
include src/pug/mixins.pug

//- VARIABLES
	=============================
- const characteristics = {'(ws)':'weapon_skill', '(bs)':'ballistic_skill', '(s)':'strength', '(t)':'toughness', '(ag)':'agility', '(int)':'intelligence', '(per)':'perception', '(wp)':'willpower', '(fel)':'fellowship', '(inf)':'infamy'};
- const skillsLeft = {'acrobatics':'(ag)','athletics':'(s)','awareness':'(per)', 'charm':'(fel)', 'command':'(fel)', 'commerce':'(int)', 'common lore': '(int)', 'deceive':'(fel)','dodge':'(ag)', 'forbidden lore':'(int)','inquiry':'(fel)','intimidate':'(wp)','linguistics':'(int)', 'logic':'(int)'};
- const skillsRight = {'medicae':'(int)','navigation (surface)':'(int)','navigation (stellar)':'(int)', 'navigation (warp)':'(int)', 'operate (aeronautica)': '(ag)', 'operate (voidship)': '(ag)', 'parry':'(ws)','psyniscience':'(per)', 'scholastic lore': '(int)','scrutiny':'(per)','security':'(int)', 'sleight of hand':'(ag)', 'stealth': '(ag)', 'tech-use': '(int)', 'tracking':'(int)', 'trade':'(int)'};
- const repeatingSkills = ['common lore', 'forbidden lore', 'linguistics', 'scholastic lore', 'trade'];
- const skillRanks = ['trained', '+10', '+20', '+30'];
- const darkGods = ['khorne', 'slaanesh', 'nurgle', 'tzeentch', 'unaligned'];

//- TABS
	=============================
input.type(name='attr_sheet_type' type='hidden' value='core')
input.display_string(name='attr_character_settings' type='hidden' value='')

//- TABS & LOGO
	=============================
.tabs

//-NPC SHEET
	=============================
.npc
	.box.npc-flex
		p NPC STUFF
	.box.npc-flex
		p MORE NPC STUFF 

//-PC SHEET
	=============================
.pc
	.container.grid.navigation
		img(alt='Black Crusade' src='https://raw.githubusercontent.com/clevett/roll20-character-sheets/blackcrusade/Warhammer%2040k%20Black%20Crusade/src/imgs/black-crusade-logo.png')
		each val in ['core', 'arms', 'advancement']
			label.pseudo-button(data-i18n-title=`sheet type: ${val}`)
				if val === 'core'
					input(name=`attr_sheet_type` title=`@{sheet_type}` type='radio' value=val selected)
				else
					input(name=`attr_sheet_type` title=`@{sheet_type}` type='radio' value=val)
				span.eclipse #{val}
		.rowx
			h2.text-lowercase(data-i18n='/w GM') /w GM
			label.switch(data-i18n-title='whisper rolls to gm')
				input.whisper-toggle(name='attr_gm_toggle' type='checkbox' value='/w gm')
				span.slider
		.rowx
			each val, key in {'modifiers':'?{Modifiers +/-|0}'}
				h2(data-i18n=key) #{key}
				label.switch(data-i18n-title=key title=key)
					input.whisper-toggle(name=`attr_${key}_toggle` type='checkbox' value=val)
					span.slider

	.container.grid.info
		.rowx.grid.names
			each val in ['character name', 'player name']
				h1(data-i18n=val)
				+textInput(val)
			+checkboxSymbol('info settings', 'p')
			.rowx.settings
				.rowx.grid.archetype
					each val in ['archetype', 'rank', 'warband name']
						h1(data-i18n=val)
						+textInput(val)
				.rowx.grid.4autocolumn
					each val in ['pride', 'disgrace']
						h1(data-i18n=val)
						+textInput(val)
				each val in ['motivation', 'description']
					.rowx.grid.2autocolumn
							h1(data-i18n=val)
							+textInput(val)

	.container.grid.characteristics
		.rowx.grid.10column
			h1.text-center(data-i18n='characteristics')
			+checkboxSymbol('characteristics settings', 'p')
			each val, key in characteristics
				- const nameSpaces = val.replace(/_/g, " ");
				.col.grid
					.rowx.text-center
						button(name=`roll_${key}` type='roll' value=`${rollPrefix} {{header=^{${nameSpaces}}}} {{dice=[[ceil((@{${val}}+${rollEnding}]]}}`)
							h2.small-caps(data-i18n=nameSpaces)
					.rowx.text-center
						h3.small-caps(data-i18n=key)
			each val, key in characteristics
				- const nameSpaces = val.replace(/_/g, " ");
				+hiddenInput(`${nameSpaces} bonus`, 0)
				.grid.border.background-color
					.score
						span.text-center(name=`attr_${val}`)
					.bonus
						span.text-center(name=`attr_${val}_bonus`)
			.rowx.settings.10column
				h1.text-center(data-i18n='scores')
				each val, key in characteristics
					- const nameSpaces = val.replace(/_/g, " ");
					.col.grid
						.rowx.text-center
							h2.small-caps(data-i18n=nameSpaces)
						.rowx
							+numberInput(`${nameSpaces}`)
				h1.text-center(data-i18n='unnatural bonus')
				each val, key in characteristics
					- const nameSpaces = val.replace(/_/g, " ");
					.col.grid
						.rowx.text-center
							h2.small-caps(data-i18n=nameSpaces)
						.rowx
							+numberInput(`${nameSpaces} unnatural bonus`)

	.container.skill-talents-traits
		.rowx.grid.headers
			.col
				h1.text-center(data-i18n='skills')
			.col
				h1.text-center(data-i18n='talents & traits')
		.rowx
			each skillList in [skillsLeft, skillsRight]
				.col.left-col.skill-list
					.rowx.grid
						each val in skillRanks
							h2.text-vertical(data-i18n=val)
					each val, key in skillList
						+skillColumns(key, val)
						if repeatingSkills.includes(key)
							+repeatingSkills(key, val)
			.col.right-col.repeating-container
				+repeatingText('talents traits')

	.container.arms
		.rowx
			h1.text-center(data-i18n='armour')
		.rowx.grid.6column
			+armorAreas('head','(1-10)')
			+armorAreas('right arm','(11-20)')
			+armorAreas('left arm','(21-30)')
			+armorAreas('body','(31-70)')
			+armorAreas('right leg','(71-85)')
			+armorAreas('left leg','(86-00)')
		.row
			.col.left-col
				.rowx.grid.headers
					h1.text-center(data-i18n='weapons')
				.repeating-container
					fieldset(class=`repeating_weapons`)
						.rowx.grid.descriptor
							+repeatingButton()
							+checkboxSymbol('collapse', 'i')
							+checkboxSymbol('settings', 'p')
							.rowx.collapse.background-color
								.rowx.grid.8autocolumn
									each val in ['class', 'damage', 'type', 'pen']
										h2(data-i18n=val)
										span.text-center(name=`attr_${val}`)
								.rowx.grid.8autocolumn
									each val in ['range', 'rof', 'clip', 'rld']
										h2(data-i18n=val)
										span.text-center(name=`attr_${val}`)
								.rowx.grid.2autocolumn
									h2(data-i18n='special rules')
									span.collapse.description(name='attr_description')
							.rowx.settings
								.rowx.grid.2autocolumn
									h2(data-i18n='name')
									+textInput(`name`)
								.rowx.grid.8autocolumn
									each val in ['class', 'damage', 'type', 'pen']
										h2(data-i18n=val)
										+textInput(val)
								.rowx.grid.8autocolumn
									each val in ['range', 'rof', 'clip', 'rld']
										h2(data-i18n=val)
										+textInput(val)
								.rowx.grid
									h2(data-i18n='special rules')
									+textarea('description')
				.rowx.grid.headers
					h1.text-center(data-i18n='movement')
				.rowx.grid.4column.movement
					each val in ['half', 'full', 'charge', 'run']
						input(name=`attr_movement_${val}` type='hidden')
						.col.grid.2autocolumn
							h2.text-center(data-i18n=val)
							.borders
								+numberInput(`movement ${val}`)
				.rowx.grid.headers.psychic
					h1.text-center(data-i18n='pyschic powers')
					h2.text-center(data-i18n='psy rating')
					.borders
						+numberInput(`psy rating`)
				.repeating-container
					+repeatingText('psychic powers')
			.col.right-col
				.rowx.grid.headers
					h1.text-center(data-i18n='gear')
				.rowx
					.repeating-container
						+repeatingText('gear')
				.rowx.grid.headers
					h1.text-center(data-i18n='wounds')
				.rowx.grid.3column.movement
					each val in ['total', 'current', 'fatigue']
						input(name=`attr_wounds_${val}` type='hidden')
						.col.grid.2autocolumn
							h2.text-center(data-i18n=val)
							.borders
								+numberInput(`wounds ${val}`)
				.rowx.grid.headers
					h1.text-center(data-i18n='critical damage')
				.rowx
					.repeating-container
						+repeatingText('critical damage')
				.rowx.grid.headers
					h1.text-center(data-i18n='mental disorders')
				.rowx
					.repeating-container
						+repeatingText('mental disorders')
				.rowx.grid.headers.infamy
					h1.text-center(data-i18n='infamy points')
					h2.text-center(data-i18n='total')
					.borders
						+numberInput(`infamy points total`)
					h2.text-center(data-i18n='current')
					.borders
						+numberInput(`infamy points current`)
				.rowx.grid.headers.corruption
					h1.text-center(data-i18n='corruption points')
					h2.text-center(data-i18n='total')
					.borders
						+numberInput(`corruption total`)
				.rowx.grid.headers
					h1.text-center(data-i18n='gifts of the gods')
				.repeating-container
					+repeatingText('gifts')

	.container.advancement
		.rowx.text-center
			h1(data-i18n='advancements and alignment')
		.rowx
			.col.left-col
				.rowx.grid.headers
					each val in ['advancement', 'cost', 'alignment']
						h2.text-center(data-i18n=val)
				.repeating-container
					fieldset(class=`repeating_advancement`)
						.rowx.grid
							+repeatingButton()
							span.text-center(name='attr_cost')
							span.text-center.text-capitalize(name='attr_alignment')
							+checkboxSymbol('collapse', 'i')
							+checkboxSymbol('settings', 'p')
							.rowx.collapse.background-color
								span.collapse.description(name='attr_description')
							.rowx.settings
								+textInput(`name`)
								+numberInput(`cost`)
								select(name='attr_alignment' value='unaligned')
									each val in darkGods
										if val === 'unaligned'
											option(data-i18n=val value=val selected)
										else
											option(data-i18n=val value=val)
								+textarea('description')
			.col.right-col
				.rowx.headers
					h2.text-center(data-i18n='experience')
				each val in ['total xp earned', 'total xp spent', 'unspent xp']
					.rowx.grid
						h3(data-i18n=val)
						if val === 'total xp earned'
							+numberInput(val)
						else
							.bottom-border.text-center.calculatedXp.background-color
								- val = val.replace(/ /g, '_');
								+hiddenInput(val, 0)
								span(name=`attr_${val}`)
				.rowx.headers
					h2.text-center(data-i18n='total alignment advances')
				each val in darkGods
					.rowx.grid
						h3(data-i18n=val)
						+numberInput(val)
				.rowx.headers
					h2.text-center(data-i18n='current alignment')
				.rowx
					+textInput('current alignment')



//- NOTES SHEET
	=============================
.notes

//-OPTIONS SHEET
	=============================
.options

//-FOOTER
	=============================
footer
	span Version 
	span(name='attr_version')

//-ROLL TEMPLATE
	=============================
.rolltemplates
	rolltemplate.sheet-rolltemplate-rolls
		.sheet-template-container
			// - Display a header on the template -
			.sheet-template-header
				| {{#header}}{{header}}{{/header}}
			.sheet-template-body
				// - Display a header on the template -
				| {{#rollGreater() dice 0}}
				.sheet-template-row 
					span {{dice}} degrees of success
				| {{/rollGreater() dice 0}}

				| {{#rollLess() dice 0}}
				.sheet-template-row 
					span {{dice}} degress of failures
				| {{/rollLess() dice 0}}

				| {{#rollTotal() dice 0}}
				.sheet-template-row
					span {{dice}}
				| {{/rollTotal() dice 0}}

				//- Display a description. This is great for text included with a roll -
				| {{#desc}}
				.sheet-template-row
					span.sheet-template-desc {{desc}}
				| {{/desc}}

//- SCRIPTS
script(type="text/worker")
	include src/js/Scripts.js
	include src/js/EventHandlers.js



